#!/usr/local/anaconda3/bin/python

def monomorphize_dyn():
    source = ''
    with open('src/core/Dyn_T_.sol', 'r') as f:
        source = f.read()

    tests = ''
    with open('test/core/Dyn_T_.t.sol', 'r') as f:
        tests = f.read()

    for primitive in primitive_types:
        with open(f'src/dyn/Dyn{primitive.capitalize()}.sol', 'w') as f:
            f.write(source\
                .replace(t_import_src, '', 1)\
                .replace('Dyn_T_', f'Dyn{primitive.capitalize()}')\
                .replace('_T_', primitive)
            )
        with open(f'test/dyn/Dyn{primitive.capitalize()}.t.sol', 'w') as f:
            f.write(tests\
                .replace(t_import_test, '', 1)\
                .replace('/core', '/dyn')\
                .replace('Dyn_T_', f'Dyn{primitive.capitalize()}')\
                .replace('_T_', primitive)
            )


def monomorphize_option():
    source = ''
    with open('src/core/Option_T_.sol', 'r') as f:
        source = f.read()

    tests = ''
    with open('test/core/Option_T_.t.sol', 'r') as f:
        tests = f.read()
    for primitive in primitive_types:
        with open(f'src/option/Option{primitive.capitalize()}.sol', 'w') as f:
            f.write(source\
                .replace(t_import_src, '', 1)\
                .replace('Option_T_', f'Option{primitive.capitalize()}')\
                .replace('_T_', primitive)
            )
        with open(f'test/option/Option{primitive.capitalize()}.t.sol', 'w') as f:
            f.write(replace_wrap(tests, primitive)\
                .replace(t_import_test, '', 1)\
                .replace('/core', '/option')\
                .replace('Option_T_', f'Option{primitive.capitalize()}')\
                .replace('_T_', primitive)
            )


def replace_wrap(source, primitive):
    if primitive == 'bool':
        return source.replace('_T_.wrap(1)', 'false').replace('_T_.wrap(2)', 'true')
    elif primitive.startswith('bytes'):
        size = int(primitive[5:])
        return source\
            .replace('_T_.wrap(1)', f'bytes{size}(uint{size*8}(1))')\
            .replace('_T_.wrap(2)', f'bytes{size}(uint{size*8}(2))')
    else:
        return source.replace('_T_.wrap', primitive)

def main():
    monomorphize_dyn()
    monomorphize_option()

t_import_src = '\nimport { _T_ } from "./_T_.sol";\n'
t_import_test = '\nimport { _T_ } from "../../src/core/_T_.sol";\n'

primitive_types = [
    'bool',
    'uint8',
    'uint16',
    'uint24',
    'uint32',
    'uint40',
    'uint48',
    'uint56',
    'uint64',
    'uint72',
    'uint80',
    'uint88',
    'uint96',
    'uint104',
    'uint112',
    'uint120',
    'uint128',
    'uint136',
    'uint144',
    'uint152',
    'uint160',
    'uint168',
    'uint176',
    'uint184',
    'uint192',
    'uint200',
    'uint208',
    'uint216',
    'uint224',
    'uint232',
    'uint240',
    'uint248',
    'uint256',
    'int8',
    'int16',
    'int24',
    'int32',
    'int40',
    'int48',
    'int56',
    'int64',
    'int72',
    'int80',
    'int88',
    'int96',
    'int104',
    'int112',
    'int120',
    'int128',
    'int136',
    'int144',
    'int152',
    'int160',
    'int168',
    'int176',
    'int184',
    'int192',
    'int200',
    'int208',
    'int216',
    'int224',
    'int232',
    'int240',
    'int248',
    'int256',
    'bytes1',
    'bytes2',
    'bytes3',
    'bytes4',
    'bytes5',
    'bytes6',
    'bytes7',
    'bytes8',
    'bytes9',
    'bytes10',
    'bytes11',
    'bytes12',
    'bytes13',
    'bytes14',
    'bytes15',
    'bytes16',
    'bytes17',
    'bytes18',
    'bytes19',
    'bytes20',
    'bytes21',
    'bytes22',
    'bytes23',
    'bytes24',
    'bytes25',
    'bytes26',
    'bytes27',
    'bytes28',
    'bytes29',
    'bytes30',
    'bytes31',
    'bytes32',
    'address',
]

if __name__ == '__main__':
    main()
